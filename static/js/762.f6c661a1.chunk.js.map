{"version":3,"file":"static/js/762.f6c661a1.chunk.js","mappings":"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","sources":["services/apiService.js","components/SearchBar/SearchBar.styles.jsx","components/SearchBar/SearchBar.jsx","components/SearchMoviesCards/SearchMoviesCards.styled.jsx","components/SearchMoviesCards/SearchMoviesCards.jsx","views/MoviesSearhView.jsx","hooks/useFetchSearchMovies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'bc1d8643395b3b7e7b983675d8b7669b';\nconst UKR_Language = `&language=uk`;\n\nexport async function getTrending() {\n  const response = await axios.get(\n    `/trending/movie/week?api_key=${API_KEY}&${UKR_Language}`\n  );\n  return response.data.results;\n}\n\nexport async function getDetalis(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&${UKR_Language}`\n  );\n  return response.data;\n}\nexport async function movieCredits(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&${UKR_Language}`\n  );\n  return response.data;\n}\nexport async function getReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`\n  );\n  return response.data;\n}\n\nexport async function getSearchMovies(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return response.data;\n}\n","import styled from '@emotion/styled';\nexport const Input = styled.input`\n  max-width: 500px;\n  font: inherit;\n  font-size: 20px;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n\n  margin-bottom: 20px;\n`;\n","import { Field, Formik, Form } from 'formik';\nimport { Input, InputContainer } from './SearchBar.styles';\n\nconst value = {\n  query: '',\n};\n\nexport const SearchBar = ({ searchHandler }) => {\n  const handleSubmit = (value, { resetForm }) => {\n    const { query } = value;\n    searchHandler(query);\n    resetForm();\n  };\n  return (\n    <InputContainer>\n      <Formik initialValues={value} onSubmit={handleSubmit}>\n        <Form autoComplete=\"off\">\n          <Field\n            as={Input}\n            type=\"text\"\n            name=\"query\"\n            placeholder=\"Search films\"\n          />\n        </Form>\n      </Formik>\n    </InputContainer>\n  );\n};\n\n// const [inputValue, setInputValue] = useState('');\n// const handleChange = evt => setInputValue(evt.target.value);\n// const submitHandler = evt => {\n//   evt.preventDefault();\n\n//   if (inputValue.trim() === '') {\n//     return alert('Enter your request, please');\n//   }\n//   searchHandler(inputValue.trim().toLowerCase());\n// };\n\n// return (\n//   <>\n//     <form onSubmit={submitHandler}>\n//       <input\n//         value={inputValue}\n//         onChange={handleChange}\n//         placeholder=\"Searh Movies\"\n//       />\n//     </form>\n//     {/* <Formik onSubmit={submitHandler} initialValues={inputValue}>\n//       <Form autoComplete=\"off\">\n//         <Field  type=\"text\" />\n//       </Form>\n//     </Formik> */}\n//   </>\n// );\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nexport const Containrer = styled.div`\n  max-width: 1300px;\n  min-width: 300px;\n  flex-wrap: wrap;\n`;\nexport const CardContainer = styled.div`\n  max-width: 1300px;\n  box-shadow: 0 0 1em rgba(0, 0, 0, 0.5);\n  margin-bottom: 15px;\n  display: flex;\n  padding: 10px;\n  box-shadow: 0 0 1em rgba(0, 0, 0, 0.5);\n  &:hover {\n    transform: translate(-5px, -5px);\n    transition-property: transform;\n    transition-duration: 300ms;\n  }\n`;\nexport const LinkFilm = styled(Link)`\n  text-decoration: none;\n`;\nexport const PosterFilm = styled.img`\n  width: 150px;\n`;\nexport const FilmDiscription = styled.div`\n  padding-left: 20px;\n`;\nexport const FilmName = styled.h3``;\n","import {\n  Containrer,\n  CardContainer,\n  LinkFilm,\n  PosterFilm,\n  FilmDiscription,\n  FilmName,\n} from './SearchMoviesCards.styled';\nimport { IMG_URL } from 'services/apiService';\nimport { useLocation } from 'react-router-dom';\nexport const SearchMoviesCards = ({ SearchMovies, route }) => {\n  const location = useLocation();\n\n  return (\n    <Containrer>\n      {SearchMovies.map(({ id, poster_path, release_date, original_title }) => {\n        return (\n          <LinkFilm to={`${id}`} state={{ from: location }}>\n            <CardContainer key={id}>\n              <PosterFilm\n                src={\n                  poster_path\n                    ? `${IMG_URL + poster_path}`\n                    : `https://user-images.githubusercontent.com/24848110/33519396-7e56363c-d79d-11e7-969b-09782f5ccbab.png`\n                }\n                alt=\"\"\n              />\n              <FilmDiscription>\n                <FilmName>\n                  {original_title} {release_date}\n                </FilmName>\n                <p> Дата релизу: {release_date}</p>\n              </FilmDiscription>\n            </CardContainer>\n          </LinkFilm>\n        );\n      })}\n    </Containrer>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams, Outlet } from 'react-router-dom';\nimport { useFetchSearchMovies } from 'hooks/useFetchSearchMovies';\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { SearchMoviesCards } from 'components/SearchMoviesCards/SearchMoviesCards';\n\nconst MoviesSearhView = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const { MoviesBySearch } = useFetchSearchMovies(searchQuery);\n\n  const currentSearchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (currentSearchQuery) {\n      setSearchQuery(currentSearchQuery);\n    }\n  }, [currentSearchQuery]);\n\n  const searchHandler = query => {\n    setSearchQuery(query);\n    setSearchParams({ query: query });\n  };\n\n  return (\n    <>\n      <SearchBar searchHandler={searchHandler} />\n      <SearchMoviesCards SearchMovies={MoviesBySearch} route={'movies/'} />\n      <Outlet />\n    </>\n  );\n};\nexport default MoviesSearhView;\n","import { useEffect, useState } from 'react';\nimport { getSearchMovies } from 'services/apiService';\n\nexport const useFetchSearchMovies = searchQuery => {\n  const [MoviesBySearch, setMoviesBySearch] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const films = await getSearchMovies(searchQuery);\n        if (films.results.length === 0) {\n          return alert(\n            `Nothing was found for the query \"${searchQuery}\", please specify your query)`\n          );\n        }\n        setMoviesBySearch(films.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [searchQuery]);\n  return { MoviesBySearch, isLoading };\n};\n"],"names":["IMG_URL","axios","API_KEY","UKR_Language","getTrending","response","data","results","getDetalis","movieId","movieCredits","getReviews","getSearchMovies","query","Input","styled","InputContainer","value","SearchBar","searchHandler","initialValues","onSubmit","resetForm","autoComplete","as","type","name","placeholder","Containrer","CardContainer","LinkFilm","Link","PosterFilm","FilmDiscription","FilmName","SearchMoviesCards","SearchMovies","location","route","useLocation","map","id","poster_path","release_date","original_title","to","state","from","src","alt","useState","searchQuery","setSearchQuery","useSearchParams","searchParams","setSearchParams","MoviesBySearch","setMoviesBySearch","isLoading","setIsLoading","useEffect","films","length","alert","console","log","getMovies","useFetchSearchMovies","currentSearchQuery","get"],"sourceRoot":""}