{"version":3,"file":"static/js/187.88bb70a4.chunk.js","mappings":"mVAEaA,EAAU,kCAEvBC,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCACVC,EAAY,eAEX,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBH,IAAAA,IAAA,uCACWC,EADX,YACsBC,IAFxC,cACCE,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,uFACkBR,IAAAA,IAAA,iBACXQ,EADW,oBACQP,EADR,YACmBC,IAFrC,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAMA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,uFACkBR,IAAAA,IAAA,gBACZQ,EADY,4BACeP,EADf,YAC0BC,IAF5C,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAMA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA0BF,GAA1B,uFACkBR,IAAAA,IAAA,iBACXQ,EADW,4BACgBP,EADhB,YADlB,cACCG,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBZ,IAAAA,IAAA,gCACIC,EADJ,wCAC2CW,IAF7D,cACCR,EADD,yBAIEA,EAASC,MAJX,oE,qKCjCMQ,EAAUC,EAAAA,EAAAA,IAAH,4DAIPC,EAAOD,EAAAA,EAAAA,GAAH,+CAGJE,EAAgBF,EAAAA,EAAAA,IAAH,2G,SCNbG,EAAY,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC9C,OACE,UAACJ,EAAD,YACE,SAACH,EAAD,CACEQ,IACEH,EAAY,UACLnB,EAAAA,GAAUmB,GADL,oDAIdI,IAAKH,KAEP,SAACJ,EAAD,UAAOI,KACP,uBAAIC,QCZGG,EAAQT,EAAAA,EAAAA,IAAH,0ICALU,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAsB,EAAhBC,UAChC,OACE,SAACH,EAAD,UACGE,EAAKE,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASV,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxC,OACE,SAACH,EAAD,CAEEC,aAAcA,EACdC,KAAMA,EACNC,UAAWA,GAHNQ,SCIjB,EAViB,WACf,MCCkC,WAClC,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOJ,EAAP,KAAaK,EAAb,KACA,GAAgCD,EAAAA,EAAAA,WAAS,GAAzC,eAAOH,EAAP,KAAkBK,EAAlB,KACMvB,GAAYwB,EAAAA,EAAAA,MAAZxB,QAeN,OAdAyB,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEF,GAAW,GADb,mBAG2BtB,EAAAA,EAAAA,IAAaD,GAHxC,OAGU0B,EAHV,OAIIJ,EAAQI,EAAST,MAJrB,gDAMIU,QAAQC,IAAR,MANJ,yBAQIL,GAAW,GARf,6EADc,uBAAC,WAAD,wBAYdM,KACC,CAAC7B,IACG,CAAEiB,KAAAA,EAAMC,UAAAA,GDnBaY,GAApBb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAEd,OACE,+BACE,SAACF,EAAD,CAAWC,KAAMA,EAAMC,UAAWA","sources":["services/apiService.js","components/CastCards/CastCards.styled.jsx","components/CastCards/CastCards.jsx","components/CastList/CardList.styled.jsx","components/CastList/CastList.jsx","views/CastView.jsx","hooks/useFetchCreditsMovie.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'bc1d8643395b3b7e7b983675d8b7669b';\nconst UKR_Language = `&language=uk`;\n\nexport async function getTrending() {\n  const response = await axios.get(\n    `/trending/movie/week?api_key=${API_KEY}&${UKR_Language}`\n  );\n  return response.data.results;\n}\n\nexport async function getDetalis(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&${UKR_Language}`\n  );\n  return response.data;\n}\nexport async function movieCredits(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&${UKR_Language}`\n  );\n  return response.data;\n}\nexport async function getReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`\n  );\n  return response.data;\n}\n\nexport async function getSearchMovies(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return response.data;\n}\n","import styled from '@emotion/styled';\nexport const Profile = styled.img`\n  width: 120px;\n  margin: 0 auto;\n`;\nexport const Name = styled.h3`\n  text-align: center;\n`;\nexport const CardContainer = styled.div`\n  width: 150px;\n  display: block;\n  text-align: center;\n  margin-bottom: 20px;\n`;\n","import { IMG_URL } from 'services/apiService';\nimport { Profile, Name, CardContainer } from './CastCards.styled';\nexport const CastCards = ({ profile_path, name, character }) => {\n  return (\n    <CardContainer>\n      <Profile\n        src={\n          profile_path\n            ? `${IMG_URL + profile_path}`\n            : `https://img.icons8.com/ios/452/user-not-found.png`\n        }\n        alt={name}\n      />\n      <Name>{name}</Name>\n      <p>{character}</p>\n    </CardContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Cards = styled.div`\n  max-width: 1300px;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n","import { CastCards } from 'components/CastCards/CastCards';\nimport { Cards } from './CardList.styled';\nexport const CardsList = ({ cast, isLoading }) => {\n  return (\n    <Cards>\n      {cast.map(({ cast_id, profile_path, name, character }) => {\n        return (\n          <CastCards\n            key={cast_id}\n            profile_path={profile_path}\n            name={name}\n            character={character}\n          />\n        );\n      })}\n    </Cards>\n  );\n};\n","import { useFetchCreditsMovie } from 'hooks/useFetchCreditsMovie';\nimport { CardsList } from 'components/CastList/CastList';\nconst CastView = () => {\n  const { cast, isLoading } = useFetchCreditsMovie();\n\n  return (\n    <>\n      <CardsList cast={cast} isLoading={isLoading} />\n    </>\n  );\n};\n\nexport default CastView;\n","import { movieCredits } from 'services/apiService';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchCreditsMovie = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  let { movieId } = useParams();\n  useEffect(() => {\n    async function getCast() {\n      setLoading(true);\n      try {\n        const castData = await movieCredits(movieId);\n        setCast(castData.cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getCast();\n  }, [movieId]);\n  return { cast, isLoading };\n};\n"],"names":["IMG_URL","axios","API_KEY","UKR_Language","getTrending","response","data","results","getDetalis","movieId","movieCredits","getReviews","getSearchMovies","query","Profile","styled","Name","CardContainer","CastCards","profile_path","name","character","src","alt","Cards","CardsList","cast","isLoading","map","cast_id","useState","setCast","setLoading","useParams","useEffect","castData","console","log","getCast","useFetchCreditsMovie"],"sourceRoot":""}